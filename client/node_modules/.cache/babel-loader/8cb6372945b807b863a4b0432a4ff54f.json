{"ast":null,"code":"import React,{useEffect}from'react';import{connect}from'react-redux';import{getGithubRepos}from'../../actions/profile';var ProfileGithub=function ProfileGithub(_ref){var username=_ref.username,getGithubRepos=_ref.getGithubRepos,repos=_ref.repos;useEffect(function(){getGithubRepos(username);},[getGithubRepos,username]);return React.createElement(\"div\",{className:\"profile-github\"},React.createElement(\"h2\",{className:\"text-primary my-1\"},\"Github Repos\"),repos.map(function(repo){return React.createElement(\"div\",{key:repo.id,className:\"repo bg-white p-1 my-1\"},React.createElement(\"div\",null,React.createElement(\"h4\",null,React.createElement(\"a\",{href:repo.html_url,target:\"_blank\",rel:\"noopener noreferrer\"},repo.name)),React.createElement(\"p\",null,repo.description)),React.createElement(\"div\",null,React.createElement(\"ul\",null,React.createElement(\"li\",{className:\"badge badge-primary\"},\"Stars: \",repo.stargazers_count),React.createElement(\"li\",{className:\"badge badge-dark\"},\"Watchers: \",repo.watchers_count),React.createElement(\"li\",{className:\"badge badge-light\"},\"Forks: \",repo.forks_count))));}));};var mapStateToProps=function mapStateToProps(state){return{repos:state.profile.repos};};export default connect(mapStateToProps,{getGithubRepos:getGithubRepos})(ProfileGithub);","map":{"version":3,"sources":["/Users/user/Documents/GitHub/devconnector_2.0-master/client/src/components/profile/ProfileGithub.js"],"names":["React","useEffect","connect","getGithubRepos","ProfileGithub","username","repos","map","repo","id","html_url","name","description","stargazers_count","watchers_count","forks_count","mapStateToProps","state","profile"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,OAASC,OAAT,KAAwB,aAAxB,CACA,OAASC,cAAT,KAA+B,uBAA/B,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAyC,IAAtCC,CAAAA,QAAsC,MAAtCA,QAAsC,CAA5BF,cAA4B,MAA5BA,cAA4B,CAAZG,KAAY,MAAZA,KAAY,CAC7DL,SAAS,CAAC,UAAM,CACdE,cAAc,CAACE,QAAD,CAAd,CACD,CAFQ,CAEN,CAACF,cAAD,CAAiBE,QAAjB,CAFM,CAAT,CAIA,MACE,4BAAK,SAAS,CAAC,gBAAf,EACE,0BAAI,SAAS,CAAC,mBAAd,iBADF,CAEGC,KAAK,CAACC,GAAN,CAAU,SAAAC,IAAI,QACb,4BAAK,GAAG,CAAEA,IAAI,CAACC,EAAf,CAAmB,SAAS,CAAC,wBAA7B,EACE,+BACE,8BACE,yBAAG,IAAI,CAAED,IAAI,CAACE,QAAd,CAAwB,MAAM,CAAC,QAA/B,CAAwC,GAAG,CAAC,qBAA5C,EACGF,IAAI,CAACG,IADR,CADF,CADF,CAME,6BAAIH,IAAI,CAACI,WAAT,CANF,CADF,CASE,+BACE,8BACE,0BAAI,SAAS,CAAC,qBAAd,YACUJ,IAAI,CAACK,gBADf,CADF,CAIE,0BAAI,SAAS,CAAC,kBAAd,eACaL,IAAI,CAACM,cADlB,CAJF,CAOE,0BAAI,SAAS,CAAC,mBAAd,YAA0CN,IAAI,CAACO,WAA/C,CAPF,CADF,CATF,CADa,EAAd,CAFH,CADF,CA4BD,CAjCD,CAyCA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAChCX,KAAK,CAAEW,KAAK,CAACC,OAAN,CAAcZ,KADW,CAAL,EAA7B,CAIA,cAAeJ,CAAAA,OAAO,CAACc,eAAD,CAAkB,CAAEb,cAAc,CAAdA,cAAF,CAAlB,CAAP,CAA6CC,aAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getGithubRepos } from '../../actions/profile';\n\nconst ProfileGithub = ({ username, getGithubRepos, repos }) => {\n  useEffect(() => {\n    getGithubRepos(username);\n  }, [getGithubRepos, username]);\n\n  return (\n    <div className=\"profile-github\">\n      <h2 className=\"text-primary my-1\">Github Repos</h2>\n      {repos.map(repo => (\n        <div key={repo.id} className=\"repo bg-white p-1 my-1\">\n          <div>\n            <h4>\n              <a href={repo.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n                {repo.name}\n              </a>\n            </h4>\n            <p>{repo.description}</p>\n          </div>\n          <div>\n            <ul>\n              <li className=\"badge badge-primary\">\n                Stars: {repo.stargazers_count}\n              </li>\n              <li className=\"badge badge-dark\">\n                Watchers: {repo.watchers_count}\n              </li>\n              <li className=\"badge badge-light\">Forks: {repo.forks_count}</li>\n            </ul>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nProfileGithub.propTypes = {\n  getGithubRepos: PropTypes.func.isRequired,\n  repos: PropTypes.array.isRequired,\n  username: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  repos: state.profile.repos\n});\n\nexport default connect(mapStateToProps, { getGithubRepos })(ProfileGithub);\n"]},"metadata":{},"sourceType":"module"}